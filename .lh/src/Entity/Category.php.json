{
    "sourceFile": "src/Entity/Category.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1668072702308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1668072849593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n use Doctrine\\Common\\Collections\\Collection;\n use Doctrine\\ORM\\Mapping as ORM;\n \n #[ORM\\Entity(repositoryClass: CategoryRepository::class)]\n-class Category\n+class category\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n"
                },
                {
                    "date": 1668072893965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n use Doctrine\\Common\\Collections\\Collection;\n use Doctrine\\ORM\\Mapping as ORM;\n \n #[ORM\\Entity(repositoryClass: CategoryRepository::class)]\n-class category\n+class Category\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n"
                },
                {
                    "date": 1668073189701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n use Doctrine\\Common\\Collections\\Collection;\n use Doctrine\\ORM\\Mapping as ORM;\n \n #[ORM\\Entity(repositoryClass: CategoryRepository::class)]\n-class Category\n+class category\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n"
                },
                {
                    "date": 1668074682627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace App\\Entity;\n \n use App\\Repository\\CategoryRepository;\n+use EasyCorp\\Bundle\\EasyAdminBundle\\Controller\\AbstractCrudController;\n use Doctrine\\Common\\Collections\\ArrayCollection;\n use Doctrine\\Common\\Collections\\Collection;\n use Doctrine\\ORM\\Mapping as ORM;\n \n"
                },
                {
                    "date": 1668074956750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \n namespace App\\Entity;\n \n use App\\Repository\\CategoryRepository;\n-use EasyCorp\\Bundle\\EasyAdminBundle\\Controller\\AbstractCrudController;\n use Doctrine\\Common\\Collections\\ArrayCollection;\n use Doctrine\\Common\\Collections\\Collection;\n use Doctrine\\ORM\\Mapping as ORM;\n \n"
                },
                {
                    "date": 1668075580696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n     private ?int $id = null;\n \n-    #[ORM\\Column]\n-    private ?bool $name = null;\n+    #[ORM\\Column(length: 255)]\n+    private ?string $name = null;\n \n     #[ORM\\Column(nullable: true)]\n     private ?\\DateTimeImmutable $updatedAt = null;\n \n"
                },
                {
                    "date": 1668075597282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     {\n         return $this->name;\n     }\n \n-    public function setName(bool $name): self\n+    public function setName(b $name): self\n     {\n         $this->name = $name;\n \n         return $this;\n"
                },
                {
                    "date": 1668075611876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,14 +33,14 @@\n     {\n         return $this->id;\n     }\n \n-    public function isName(): ?bool\n+    public function isName(): ?string\n     {\n         return $this->name;\n     }\n \n-    public function setName(b $name): self\n+    public function setName(string $name): self\n     {\n         $this->name = $name;\n \n         return $this;\n"
                },
                {
                    "date": 1668075647342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n     private ?int $id = null;\n \n-    #[ORM\\Column(length: 255)]\n-    private ?string $name = null;\n+    #[ORM\\Column]\n+    private ?bool $name = null;\n \n     #[ORM\\Column(nullable: true)]\n     private ?\\DateTimeImmutable $updatedAt = null;\n \n@@ -33,14 +33,14 @@\n     {\n         return $this->id;\n     }\n \n-    public function isName(): ?string\n+    public function isName(): ?bool\n     {\n         return $this->name;\n     }\n \n-    public function setName(string $name): self\n+    public function setName(bool $name): self\n     {\n         $this->name = $name;\n \n         return $this;\n"
                },
                {
                    "date": 1668075657871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n     private ?int $id = null;\n \n     #[ORM\\Column]\n     private ?bool $name = null;\n+    \n \n     #[ORM\\Column(nullable: true)]\n     private ?\\DateTimeImmutable $updatedAt = null;\n \n"
                },
                {
                    "date": 1668075668118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,13 @@\n     private ?int $id = null;\n \n     #[ORM\\Column]\n     private ?bool $name = null;\n-    \n \n+    #[ORM\\Column]\n+    private ?bool $active = null;\n+\n+\n     #[ORM\\Column(nullable: true)]\n     private ?\\DateTimeImmutable $updatedAt = null;\n \n     #[ORM\\OneToMany(mappedBy: 'Category', targetEntity: Product::class)]\n"
                },
                {
                    "date": 1668075678653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     }\n \n     public function isName(): ?bool\n     {\n-        return $this->name;\n+        return $this->active;\n     }\n \n     public function setName(bool $name): self\n     {\n"
                },
                {
                    "date": 1668075686353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     {\n         return $this->active;\n     }\n \n-    public function setName(bool $name): self\n+    public function setName(bool $at): self\n     {\n         $this->name = $name;\n \n         return $this;\n"
                },
                {
                    "date": 1668075700042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,11 @@\n     {\n         return $this->active;\n     }\n \n-    public function setName(bool $at): self\n+    public function setName(bool $active): self\n     {\n-        $this->name = $name;\n+        $this->active = $name;\n \n         return $this;\n     }\n \n"
                },
                {
                    "date": 1668075707028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     }\n \n     public function setName(bool $active): self\n     {\n-        $this->active = $name;\n+        $this->active = $act;\n \n         return $this;\n     }\n \n"
                },
                {
                    "date": 1668075715820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,16 +37,16 @@\n     {\n         return $this->id;\n     }\n \n-    public function isName(): ?bool\n+    public function is(): ?bool\n     {\n         return $this->active;\n     }\n \n     public function setName(bool $active): self\n     {\n-        $this->active = $act;\n+        $this->active = $active;\n \n         return $this;\n     }\n \n"
                },
                {
                    "date": 1668075722636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     {\n         return $this->active;\n     }\n \n-    public function set(bool $active): self\n+    public function setA(bool $active): self\n     {\n         $this->active = $active;\n \n         return $this;\n"
                },
                {
                    "date": 1668085827658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,7 +107,7 @@\n     }\n \n     public function __toString()\n     {\n-        return\n+        return \n     }\n }\n"
                }
            ],
            "date": 1668072702308,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\CategoryRepository;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity(repositoryClass: CategoryRepository::class)]\nclass Category\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n\n    #[ORM\\Column]\n    private ?bool $name = null;\n\n    #[ORM\\Column(nullable: true)]\n    private ?\\DateTimeImmutable $updatedAt = null;\n\n    #[ORM\\OneToMany(mappedBy: 'Category', targetEntity: Product::class)]\n    private Collection $products;\n\n    public function __construct()\n    {\n        $this->products = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function isName(): ?bool\n    {\n        return $this->name;\n    }\n\n    public function setName(bool $name): self\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    public function getUpdatedAt(): ?\\DateTimeImmutable\n    {\n        return $this->updatedAt;\n    }\n\n    public function setUpdatedAt(?\\DateTimeImmutable $updatedAt): self\n    {\n        $this->updatedAt = $updatedAt;\n\n        return $this;\n    }\n\n    /**\n     * @return Collection<int, Product>\n     */\n    public function getProducts(): Collection\n    {\n        return $this->products;\n    }\n\n    public function addProduct(Product $product): self\n    {\n        if (!$this->products->contains($product)) {\n            $this->products->add($product);\n            $product->setCategory($this);\n        }\n\n        return $this;\n    }\n\n    public function removeProduct(Product $product): self\n    {\n        if ($this->products->removeElement($product)) {\n            // set the owning side to null (unless already changed)\n            if ($product->getCategory() === $this) {\n                $product->setCategory(null);\n            }\n        }\n\n        return $this;\n    }\n}\n"
        }
    ]
}